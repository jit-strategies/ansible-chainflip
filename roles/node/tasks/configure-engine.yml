---
- name: Check if state chain validator key exists
  ansible.builtin.stat:
    path: "{{ engine_state_chain_signing_key_file }}"
  register: sc_validator_key_file

- name: Create signing key file
  no_log: true
  ansible.builtin.copy:
    dest: "{{ engine_state_chain_signing_key_file }}"
    content: "{{ (validator_keys.stdout | from_json).signing_key.secret_key }}"
    mode: "600"
  when: not sc_validator_key_file.stat.exists
  register: create_signing_key_file

- name: Check eth key exists
  ansible.builtin.stat:
    path: "{{ engine_eth_private_key_file }}"
  register: eth_key_file

- name: Create new ethereum private key
  no_log: true
  ansible.builtin.copy:
    dest: "{{ engine_eth_private_key_file }}"
    content: "{{ (validator_keys.stdout | from_json).ethereum_key.secret_key }}"
    mode: "600"
  when:
    - engine_generate_eth_key
    - not eth_key_file.stat.exists

- name: Create chainflip config directory
  ansible.builtin.file:
    path: "{{ config_path }}/config/"
    state: directory
    mode: "0700"

- name: Get public IP from external service
  community.general.ipify_facts:
    timeout: 20
  retries: 6
  delay: 3
  register: ipify_result
  until: ipify_result is succeeded

- name: Create chainflip-engine systemd override directory
  ansible.builtin.file:
    path: /etc/systemd/system/chainflip-engine.service.d
    state: directory
    mode: "0755"
  when:
    - engine_systemd_override

- name: Create chainflip-engine systemd override file
  ansible.builtin.template:
    dest: "/etc/systemd/system/chainflip-engine.service.d/override.conf"
    src: chainflip-engine.conf.j2
    mode: "0600"
  notify:
    - Restart chainflip-engine
    - Journal restart
  when:
    - engine_systemd_override

- name: Make sure chainflip-engine is enabled
  ansible.builtin.systemd:
    name: chainflip-engine
    enabled: true

- name: Create chainflip-engine config file
  ansible.builtin.template:
    dest: "{{ engine_config_file }}"
    src: Settings.toml.j2
    mode: "0600"
  notify: Restart chainflip-engine
